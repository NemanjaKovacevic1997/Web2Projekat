// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravellifeChaser.Data;

namespace TravellifeChaser.Migrations
{
    [DbContext(typeof(TravellifeChaserDBContext))]
    partial class TravellifeChaserDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TravellifeChaser.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Gajdobra",
                            Country = "Serbia"
                        },
                        new
                        {
                            Id = 2,
                            City = "Pecinci",
                            Country = "Serbia"
                        },
                        new
                        {
                            Id = 3,
                            City = "Novi Sad",
                            Country = "Serbia"
                        },
                        new
                        {
                            Id = 4,
                            City = "Beograd",
                            Country = "Serbia",
                            Latitude = 44.820500000000003,
                            Longitude = 20.291699999999999
                        },
                        new
                        {
                            Id = 5,
                            City = "Nis",
                            Country = "Serbia",
                            Latitude = 43.337600000000002,
                            Longitude = 21.866299999999999
                        },
                        new
                        {
                            Id = 6,
                            City = "Istanbul",
                            Country = "Turkey",
                            Latitude = 41.008200000000002,
                            Longitude = 28.978400000000001
                        },
                        new
                        {
                            Id = 7,
                            City = "Doha",
                            Country = "Qatar",
                            Latitude = 25.278300000000002,
                            Longitude = 51.552
                        },
                        new
                        {
                            Id = 8,
                            City = "London",
                            Country = "England",
                            Latitude = 51.469999999999999,
                            Longitude = 0.45429999999999998
                        },
                        new
                        {
                            Id = 9,
                            City = "Paris",
                            Country = "France",
                            Latitude = 49.009700000000002,
                            Longitude = 2.5478999999999998
                        },
                        new
                        {
                            Id = 10,
                            City = "Sremska Mitrovica",
                            Country = "Serbia"
                        },
                        new
                        {
                            Id = 11,
                            City = "Smederevo",
                            Country = "Serbia"
                        },
                        new
                        {
                            Id = 12,
                            City = "Krusevac",
                            Country = "Serbia"
                        },
                        new
                        {
                            Id = 13,
                            City = "Subotica",
                            Country = "Serbia"
                        });
                });

            modelBuilder.Entity("TravellifeChaser.Models.AdminAirlinesUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId")
                        .IsUnique();

                    b.ToTable("AdminAirlinesUsers");
                });

            modelBuilder.Entity("TravellifeChaser.Models.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricelistId")
                        .HasColumnType("int");

                    b.Property<string>("PromotionalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PricelistId")
                        .IsUnique();

                    b.ToTable("Airlines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 6,
                            AverageRating = 9.1199999999999992,
                            Name = "Turkish Airlines",
                            PricelistId = 1,
                            PromotionalDescription = "Widen Your World"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 7,
                            AverageRating = 8.7300000000000004,
                            Name = "Qatar Airways",
                            PricelistId = 2,
                            PromotionalDescription = "Going Places Together"
                        });
                });

            modelBuilder.Entity("TravellifeChaser.Models.AirlineAirport", b =>
                {
                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<int>("AirportId")
                        .HasColumnType("int");

                    b.HasKey("AirlineId", "AirportId");

                    b.HasIndex("AirportId");

                    b.ToTable("AirlinesAirports");

                    b.HasData(
                        new
                        {
                            AirlineId = 1,
                            AirportId = 1
                        },
                        new
                        {
                            AirlineId = 1,
                            AirportId = 2
                        },
                        new
                        {
                            AirlineId = 1,
                            AirportId = 3
                        },
                        new
                        {
                            AirlineId = 2,
                            AirportId = 1
                        },
                        new
                        {
                            AirlineId = 2,
                            AirportId = 2
                        });
                });

            modelBuilder.Entity("TravellifeChaser.Models.Airport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 4,
                            Name = "Nikola Tesla"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 8,
                            Name = "Heathrow"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 9,
                            Name = "Charles de Gaulle"
                        });
                });

            modelBuilder.Entity("TravellifeChaser.Models.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<int?>("FromId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LandingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<DateTime>("TakeoffTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("FromId")
                        .IsUnique()
                        .HasFilter("[FromId] IS NOT NULL");

                    b.HasIndex("ToId")
                        .IsUnique()
                        .HasFilter("[ToId] IS NOT NULL");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirlineId = 1,
                            AverageRating = 4.6699999999999999,
                            Cost = 300.0,
                            Duration = 330.0,
                            FromId = 1,
                            LandingTime = new DateTime(2020, 6, 2, 20, 30, 0, 0, DateTimeKind.Unspecified),
                            Length = 2506,
                            TakeoffTime = new DateTime(2020, 6, 2, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            ToId = 2
                        },
                        new
                        {
                            Id = 2,
                            AirlineId = 2,
                            AverageRating = 3.6699999999999999,
                            Cost = 250.0,
                            Duration = 30.0,
                            FromId = 1,
                            LandingTime = new DateTime(2020, 6, 3, 3, 30, 0, 0, DateTimeKind.Unspecified),
                            Length = 1003,
                            TakeoffTime = new DateTime(2020, 6, 3, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            ToId = 3
                        },
                        new
                        {
                            Id = 3,
                            AirlineId = 1,
                            AverageRating = 4.2999999999999998,
                            Cost = 100.0,
                            Duration = 465.0,
                            FromId = 2,
                            LandingTime = new DateTime(2020, 6, 6, 4, 0, 0, 0, DateTimeKind.Unspecified),
                            Length = 400,
                            TakeoffTime = new DateTime(2020, 6, 5, 20, 15, 0, 0, DateTimeKind.Unspecified),
                            ToId = 3
                        });
                });

            modelBuilder.Entity("TravellifeChaser.Models.FlightAirport", b =>
                {
                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("AirportId")
                        .HasColumnType("int");

                    b.HasKey("FlightId", "AirportId");

                    b.HasIndex("AirportId");

                    b.ToTable("FlightsAirports");
                });

            modelBuilder.Entity("TravellifeChaser.Models.Friendship", b =>
                {
                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.HasKey("User1Id", "User2Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Frendships");

                    b.HasData(
                        new
                        {
                            User1Id = 1,
                            User2Id = 4
                        },
                        new
                        {
                            User1Id = 1,
                            User2Id = 6
                        });
                });

            modelBuilder.Entity("TravellifeChaser.Models.FriendshipRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromId")
                        .HasColumnType("int");

                    b.Property<int>("ToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("FrendshipRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromId = 1,
                            ToId = 2
                        },
                        new
                        {
                            Id = 2,
                            FromId = 3,
                            ToId = 1
                        });
                });

            modelBuilder.Entity("TravellifeChaser.Models.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("FromId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int>("ToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("TravellifeChaser.Models.Pricelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("HandLuggageOverMaxDimensions")
                        .HasColumnType("float");

                    b.Property<double>("LuggageOver10kg")
                        .HasColumnType("float");

                    b.Property<double>("LuggageOver20kg")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Pricelists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HandLuggageOverMaxDimensions = 3.0,
                            LuggageOver10kg = 5.0,
                            LuggageOver20kg = 10.0
                        },
                        new
                        {
                            Id = 2,
                            HandLuggageOverMaxDimensions = 4.0,
                            LuggageOver10kg = 6.0,
                            LuggageOver20kg = 12.0
                        });
                });

            modelBuilder.Entity("TravellifeChaser.Models.RegisteredUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RegisteredUsers");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        },
                        new
                        {
                            Id = 5
                        },
                        new
                        {
                            Id = 6
                        });
                });

            modelBuilder.Entity("TravellifeChaser.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id", "FlightId");

                    b.HasIndex("FlightId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("TravellifeChaser.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<bool>("IsQuickTicket")
                        .HasColumnType("bit");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TravellifeChaser.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Email = "kovacevicnemanja1997@gmail.com",
                            FirstName = "Nemanja",
                            LastName = "Kovacevic",
                            MobileNumber = "+381604520858",
                            Password = "kovac123",
                            Role = 0,
                            Username = "kovac123"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Email = "radovan.trudic@gmail.com",
                            FirstName = "Radovan",
                            LastName = "Trudic",
                            MobileNumber = "+381650000000",
                            Password = "rasa123",
                            Role = 0,
                            Username = "rasaBrt"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Email = "marko.markovic@gmail.com",
                            FirstName = "Marko",
                            LastName = "Markovic",
                            MobileNumber = "+381651111111",
                            Password = "marko123",
                            Role = 0,
                            Username = "markooo"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 10,
                            Email = "zekan1997@gmail.com",
                            FirstName = "Milovan",
                            LastName = "Zec",
                            MobileNumber = "+381604520858",
                            Password = "zekan123",
                            Role = 0,
                            Username = "zekann2"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 11,
                            Email = "kovacevicnemanja1997@gmail.com",
                            FirstName = "Petar",
                            LastName = "Akumovski",
                            MobileNumber = "+381604520858",
                            Password = "pekii123",
                            Role = 0,
                            Username = "pekii123"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 12,
                            Email = "kovacevicnemanja1997@gmail.com",
                            FirstName = "Mitar",
                            LastName = "Miric",
                            MobileNumber = "+381604520858",
                            Password = "mitric123",
                            Role = 0,
                            Username = "mitriccc"
                        });
                });

            modelBuilder.Entity("TravellifeChaser.Models.AdminAirlinesUser", b =>
                {
                    b.HasOne("TravellifeChaser.Models.Airline", "Airline")
                        .WithOne("Administrator")
                        .HasForeignKey("TravellifeChaser.Models.AdminAirlinesUser", "AirlineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravellifeChaser.Models.User", "User")
                        .WithOne("AdminAirlinesUser")
                        .HasForeignKey("TravellifeChaser.Models.AdminAirlinesUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravellifeChaser.Models.Airline", b =>
                {
                    b.HasOne("TravellifeChaser.Models.Address", "Address")
                        .WithMany("Airlines")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravellifeChaser.Models.Pricelist", "Pricelist")
                        .WithOne("Airline")
                        .HasForeignKey("TravellifeChaser.Models.Airline", "PricelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravellifeChaser.Models.AirlineAirport", b =>
                {
                    b.HasOne("TravellifeChaser.Models.Airline", "Airline")
                        .WithMany("BuisinessDestinations")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravellifeChaser.Models.Airport", "Airport")
                        .WithMany("Airlines")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravellifeChaser.Models.Airport", b =>
                {
                    b.HasOne("TravellifeChaser.Models.Address", "Address")
                        .WithMany("Airports")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravellifeChaser.Models.Flight", b =>
                {
                    b.HasOne("TravellifeChaser.Models.Airline", "Airline")
                        .WithMany("Flights")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravellifeChaser.Models.Airport", "From")
                        .WithOne("FlightFrom")
                        .HasForeignKey("TravellifeChaser.Models.Flight", "FromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TravellifeChaser.Models.Airport", "To")
                        .WithOne("FlightTo")
                        .HasForeignKey("TravellifeChaser.Models.Flight", "ToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TravellifeChaser.Models.FlightAirport", b =>
                {
                    b.HasOne("TravellifeChaser.Models.Airport", "Airport")
                        .WithMany("Flights")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravellifeChaser.Models.Flight", "Flight")
                        .WithMany("StopsLocations")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TravellifeChaser.Models.Friendship", b =>
                {
                    b.HasOne("TravellifeChaser.Models.RegisteredUser", "User1")
                        .WithMany("FriendsFrom")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravellifeChaser.Models.RegisteredUser", "User2")
                        .WithMany("FriendsTo")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravellifeChaser.Models.FriendshipRequest", b =>
                {
                    b.HasOne("TravellifeChaser.Models.RegisteredUser", "From")
                        .WithMany("FrendshipRequestsSent")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravellifeChaser.Models.RegisteredUser", "To")
                        .WithMany("FrendshipRequestsRecieved")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TravellifeChaser.Models.Invitation", b =>
                {
                    b.HasOne("TravellifeChaser.Models.Flight", "Flight")
                        .WithMany("Invitations")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravellifeChaser.Models.RegisteredUser", "From")
                        .WithMany("InvitationsSent")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravellifeChaser.Models.RegisteredUser", "To")
                        .WithMany("InvitationsRecieved")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TravellifeChaser.Models.RegisteredUser", b =>
                {
                    b.HasOne("TravellifeChaser.Models.User", "User")
                        .WithOne("RegisteredUser")
                        .HasForeignKey("TravellifeChaser.Models.RegisteredUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravellifeChaser.Models.Seat", b =>
                {
                    b.HasOne("TravellifeChaser.Models.Flight", "Flight")
                        .WithMany("Seats")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravellifeChaser.Models.Ticket", b =>
                {
                    b.HasOne("TravellifeChaser.Models.Flight", "Flight")
                        .WithMany("Tickets")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravellifeChaser.Models.RegisteredUser", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TravellifeChaser.Models.User", b =>
                {
                    b.HasOne("TravellifeChaser.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
